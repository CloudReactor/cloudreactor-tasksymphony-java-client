/*
 * CloudReactor API
 * CloudReactor API Documentation
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jeff@cloudreactor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.cloudreactor.tasksymphony.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.cloudreactor.tasksymphony.invoker.ApiException;
import io.cloudreactor.tasksymphony.invoker.ApiClient;
import io.cloudreactor.tasksymphony.invoker.Configuration;
import io.cloudreactor.tasksymphony.model.*;
import io.cloudreactor.tasksymphony.invoker.Pair;

import io.cloudreactor.tasksymphony.model.TokenObtainPair;
import io.cloudreactor.tasksymphony.model.TokenRefresh;
import io.cloudreactor.tasksymphony.model.TokenVerify;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthApi {
  private ApiClient apiClient;

  public AuthApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AuthApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
   * @param tokenObtainPair  (required)
   * @return TokenObtainPair
   * @throws ApiException if fails to make API call
   */
  public TokenObtainPair authJwtCreateCreate(TokenObtainPair tokenObtainPair) throws ApiException {
    Object localVarPostBody = tokenObtainPair;
    
    // verify the required parameter 'tokenObtainPair' is set
    if (tokenObtainPair == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenObtainPair' when calling authJwtCreateCreate");
    }
    
    // create path and map variables
    String localVarPath = "/auth/jwt/create/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TokenObtainPair> localVarReturnType = new TypeReference<TokenObtainPair>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
   * @param tokenRefresh  (required)
   * @return TokenRefresh
   * @throws ApiException if fails to make API call
   */
  public TokenRefresh authJwtRefreshCreate(TokenRefresh tokenRefresh) throws ApiException {
    Object localVarPostBody = tokenRefresh;
    
    // verify the required parameter 'tokenRefresh' is set
    if (tokenRefresh == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenRefresh' when calling authJwtRefreshCreate");
    }
    
    // create path and map variables
    String localVarPath = "/auth/jwt/refresh/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TokenRefresh> localVarReturnType = new TypeReference<TokenRefresh>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * Takes a token and indicates if it is valid.  This view provides no information about a token&#39;s fitness for a particular use.
   * @param tokenVerify  (required)
   * @return TokenVerify
   * @throws ApiException if fails to make API call
   */
  public TokenVerify authJwtVerifyCreate(TokenVerify tokenVerify) throws ApiException {
    Object localVarPostBody = tokenVerify;
    
    // verify the required parameter 'tokenVerify' is set
    if (tokenVerify == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenVerify' when calling authJwtVerifyCreate");
    }
    
    // create path and map variables
    String localVarPath = "/auth/jwt/verify/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TokenVerify> localVarReturnType = new TypeReference<TokenVerify>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
