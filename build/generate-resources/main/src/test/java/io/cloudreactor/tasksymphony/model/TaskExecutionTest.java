/*
 * CloudReactor API
 * CloudReactor API Documentation
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jeff@cloudreactor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cloudreactor.tasksymphony.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.cloudreactor.tasksymphony.model.AwsEcsExecutionMethod;
import io.cloudreactor.tasksymphony.model.NameAndUuid;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for TaskExecution
 */
public class TaskExecutionTest {
    private final TaskExecution model = new TaskExecution();

    /**
     * Model tests for TaskExecution
     */
    @Test
    public void testTaskExecution() {
        // TODO: test TaskExecution
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'uuid'
     */
    @Test
    public void uuidTest() {
        // TODO: test uuid
    }

    /**
     * Test the property 'dashboardUrl'
     */
    @Test
    public void dashboardUrlTest() {
        // TODO: test dashboardUrl
    }

    /**
     * Test the property 'infrastructureWebsiteUrl'
     */
    @Test
    public void infrastructureWebsiteUrlTest() {
        // TODO: test infrastructureWebsiteUrl
    }

    /**
     * Test the property 'task'
     */
    @Test
    public void taskTest() {
        // TODO: test task
    }

    /**
     * Test the property 'taskVersionNumber'
     */
    @Test
    public void taskVersionNumberTest() {
        // TODO: test taskVersionNumber
    }

    /**
     * Test the property 'taskVersionText'
     */
    @Test
    public void taskVersionTextTest() {
        // TODO: test taskVersionText
    }

    /**
     * Test the property 'taskVersionSignature'
     */
    @Test
    public void taskVersionSignatureTest() {
        // TODO: test taskVersionSignature
    }

    /**
     * Test the property 'commitUrl'
     */
    @Test
    public void commitUrlTest() {
        // TODO: test commitUrl
    }

    /**
     * Test the property 'otherInstanceMetadata'
     */
    @Test
    public void otherInstanceMetadataTest() {
        // TODO: test otherInstanceMetadata
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    public void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'environmentVariablesOverrides'
     */
    @Test
    public void environmentVariablesOverridesTest() {
        // TODO: test environmentVariablesOverrides
    }

    /**
     * Test the property 'executionMethod'
     */
    @Test
    public void executionMethodTest() {
        // TODO: test executionMethod
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'startedBy'
     */
    @Test
    public void startedByTest() {
        // TODO: test startedBy
    }

    /**
     * Test the property 'startedAt'
     */
    @Test
    public void startedAtTest() {
        // TODO: test startedAt
    }

    /**
     * Test the property 'finishedAt'
     */
    @Test
    public void finishedAtTest() {
        // TODO: test finishedAt
    }

    /**
     * Test the property 'markedDoneBy'
     */
    @Test
    public void markedDoneByTest() {
        // TODO: test markedDoneBy
    }

    /**
     * Test the property 'markedDoneAt'
     */
    @Test
    public void markedDoneAtTest() {
        // TODO: test markedDoneAt
    }

    /**
     * Test the property 'markedOutdatedAt'
     */
    @Test
    public void markedOutdatedAtTest() {
        // TODO: test markedOutdatedAt
    }

    /**
     * Test the property 'killedBy'
     */
    @Test
    public void killedByTest() {
        // TODO: test killedBy
    }

    /**
     * Test the property 'killStartedAt'
     */
    @Test
    public void killStartedAtTest() {
        // TODO: test killStartedAt
    }

    /**
     * Test the property 'killFinishedAt'
     */
    @Test
    public void killFinishedAtTest() {
        // TODO: test killFinishedAt
    }

    /**
     * Test the property 'killErrorCode'
     */
    @Test
    public void killErrorCodeTest() {
        // TODO: test killErrorCode
    }

    /**
     * Test the property 'stopReason'
     */
    @Test
    public void stopReasonTest() {
        // TODO: test stopReason
    }

    /**
     * Test the property 'lastHeartbeatAt'
     */
    @Test
    public void lastHeartbeatAtTest() {
        // TODO: test lastHeartbeatAt
    }

    /**
     * Test the property 'failedAttempts'
     */
    @Test
    public void failedAttemptsTest() {
        // TODO: test failedAttempts
    }

    /**
     * Test the property 'timedOutAttempts'
     */
    @Test
    public void timedOutAttemptsTest() {
        // TODO: test timedOutAttempts
    }

    /**
     * Test the property 'exitCode'
     */
    @Test
    public void exitCodeTest() {
        // TODO: test exitCode
    }

    /**
     * Test the property 'lastStatusMessage'
     */
    @Test
    public void lastStatusMessageTest() {
        // TODO: test lastStatusMessage
    }

    /**
     * Test the property 'errorCount'
     */
    @Test
    public void errorCountTest() {
        // TODO: test errorCount
    }

    /**
     * Test the property 'skippedCount'
     */
    @Test
    public void skippedCountTest() {
        // TODO: test skippedCount
    }

    /**
     * Test the property 'expectedCount'
     */
    @Test
    public void expectedCountTest() {
        // TODO: test expectedCount
    }

    /**
     * Test the property 'successCount'
     */
    @Test
    public void successCountTest() {
        // TODO: test successCount
    }

    /**
     * Test the property 'otherRuntimeMetadata'
     */
    @Test
    public void otherRuntimeMetadataTest() {
        // TODO: test otherRuntimeMetadata
    }

    /**
     * Test the property 'currentCpuUnits'
     */
    @Test
    public void currentCpuUnitsTest() {
        // TODO: test currentCpuUnits
    }

    /**
     * Test the property 'meanCpuUnits'
     */
    @Test
    public void meanCpuUnitsTest() {
        // TODO: test meanCpuUnits
    }

    /**
     * Test the property 'maxCpuUnits'
     */
    @Test
    public void maxCpuUnitsTest() {
        // TODO: test maxCpuUnits
    }

    /**
     * Test the property 'currentMemoryMb'
     */
    @Test
    public void currentMemoryMbTest() {
        // TODO: test currentMemoryMb
    }

    /**
     * Test the property 'meanMemoryMb'
     */
    @Test
    public void meanMemoryMbTest() {
        // TODO: test meanMemoryMb
    }

    /**
     * Test the property 'maxMemoryMb'
     */
    @Test
    public void maxMemoryMbTest() {
        // TODO: test maxMemoryMb
    }

    /**
     * Test the property 'wrapperVersion'
     */
    @Test
    public void wrapperVersionTest() {
        // TODO: test wrapperVersion
    }

    /**
     * Test the property 'wrapperLogLevel'
     */
    @Test
    public void wrapperLogLevelTest() {
        // TODO: test wrapperLogLevel
    }

    /**
     * Test the property 'deployment'
     */
    @Test
    public void deploymentTest() {
        // TODO: test deployment
    }

    /**
     * Test the property 'processCommand'
     */
    @Test
    public void processCommandTest() {
        // TODO: test processCommand
    }

    /**
     * Test the property 'isService'
     */
    @Test
    public void isServiceTest() {
        // TODO: test isService
    }

    /**
     * Test the property 'taskMaxConcurrency'
     */
    @Test
    public void taskMaxConcurrencyTest() {
        // TODO: test taskMaxConcurrency
    }

    /**
     * Test the property 'maxConflictingAgeSeconds'
     */
    @Test
    public void maxConflictingAgeSecondsTest() {
        // TODO: test maxConflictingAgeSeconds
    }

    /**
     * Test the property 'preventOfflineExecution'
     */
    @Test
    public void preventOfflineExecutionTest() {
        // TODO: test preventOfflineExecution
    }

    /**
     * Test the property 'processTimeoutSeconds'
     */
    @Test
    public void processTimeoutSecondsTest() {
        // TODO: test processTimeoutSeconds
    }

    /**
     * Test the property 'processTerminationGracePeriodSeconds'
     */
    @Test
    public void processTerminationGracePeriodSecondsTest() {
        // TODO: test processTerminationGracePeriodSeconds
    }

    /**
     * Test the property 'processMaxRetries'
     */
    @Test
    public void processMaxRetriesTest() {
        // TODO: test processMaxRetries
    }

    /**
     * Test the property 'processRetryDelaySeconds'
     */
    @Test
    public void processRetryDelaySecondsTest() {
        // TODO: test processRetryDelaySeconds
    }

    /**
     * Test the property 'schedule'
     */
    @Test
    public void scheduleTest() {
        // TODO: test schedule
    }

    /**
     * Test the property 'heartbeatIntervalSeconds'
     */
    @Test
    public void heartbeatIntervalSecondsTest() {
        // TODO: test heartbeatIntervalSeconds
    }

    /**
     * Test the property 'workflowTaskInstanceExecution'
     */
    @Test
    public void workflowTaskInstanceExecutionTest() {
        // TODO: test workflowTaskInstanceExecution
    }

    /**
     * Test the property 'apiBaseUrl'
     */
    @Test
    public void apiBaseUrlTest() {
        // TODO: test apiBaseUrl
    }

    /**
     * Test the property 'apiRequestTimeoutSeconds'
     */
    @Test
    public void apiRequestTimeoutSecondsTest() {
        // TODO: test apiRequestTimeoutSeconds
    }

    /**
     * Test the property 'apiRetryDelaySeconds'
     */
    @Test
    public void apiRetryDelaySecondsTest() {
        // TODO: test apiRetryDelaySeconds
    }

    /**
     * Test the property 'apiResumeDelaySeconds'
     */
    @Test
    public void apiResumeDelaySecondsTest() {
        // TODO: test apiResumeDelaySeconds
    }

    /**
     * Test the property 'apiErrorTimeoutSeconds'
     */
    @Test
    public void apiErrorTimeoutSecondsTest() {
        // TODO: test apiErrorTimeoutSeconds
    }

    /**
     * Test the property 'apiTaskExecutionCreationErrorTimeoutSeconds'
     */
    @Test
    public void apiTaskExecutionCreationErrorTimeoutSecondsTest() {
        // TODO: test apiTaskExecutionCreationErrorTimeoutSeconds
    }

    /**
     * Test the property 'apiTaskExecutionCreationConflictTimeoutSeconds'
     */
    @Test
    public void apiTaskExecutionCreationConflictTimeoutSecondsTest() {
        // TODO: test apiTaskExecutionCreationConflictTimeoutSeconds
    }

    /**
     * Test the property 'apiTaskExecutionCreationConflictRetryDelaySeconds'
     */
    @Test
    public void apiTaskExecutionCreationConflictRetryDelaySecondsTest() {
        // TODO: test apiTaskExecutionCreationConflictRetryDelaySeconds
    }

    /**
     * Test the property 'apiFinalUpdateTimeoutSeconds'
     */
    @Test
    public void apiFinalUpdateTimeoutSecondsTest() {
        // TODO: test apiFinalUpdateTimeoutSeconds
    }

    /**
     * Test the property 'statusUpdateIntervalSeconds'
     */
    @Test
    public void statusUpdateIntervalSecondsTest() {
        // TODO: test statusUpdateIntervalSeconds
    }

    /**
     * Test the property 'statusUpdatePort'
     */
    @Test
    public void statusUpdatePortTest() {
        // TODO: test statusUpdatePort
    }

    /**
     * Test the property 'statusUpdateMessageMaxBytes'
     */
    @Test
    public void statusUpdateMessageMaxBytesTest() {
        // TODO: test statusUpdateMessageMaxBytes
    }

    /**
     * Test the property 'debugLogTail'
     */
    @Test
    public void debugLogTailTest() {
        // TODO: test debugLogTail
    }

    /**
     * Test the property 'errorLogTail'
     */
    @Test
    public void errorLogTailTest() {
        // TODO: test errorLogTail
    }

    /**
     * Test the property 'embeddedMode'
     */
    @Test
    public void embeddedModeTest() {
        // TODO: test embeddedMode
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

}
