/*
 * CloudReactor API
 * CloudReactor API Documentation
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jeff@cloudreactor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cloudreactor.tasksymphony.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.cloudreactor.tasksymphony.model.FailureBehaviorEnum;
import io.cloudreactor.tasksymphony.model.NameAndUuid;
import io.cloudreactor.tasksymphony.model.StartTransitionConditionEnum;
import io.cloudreactor.tasksymphony.model.TimeoutBehaviorEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for WorkflowTaskInstance
 */
public class WorkflowTaskInstanceTest {
    private final WorkflowTaskInstance model = new WorkflowTaskInstance();

    /**
     * Model tests for WorkflowTaskInstance
     */
    @Test
    public void testWorkflowTaskInstance() {
        // TODO: test WorkflowTaskInstance
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'uuid'
     */
    @Test
    public void uuidTest() {
        // TODO: test uuid
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'workflow'
     */
    @Test
    public void workflowTest() {
        // TODO: test workflow
    }

    /**
     * Test the property 'task'
     */
    @Test
    public void taskTest() {
        // TODO: test task
    }

    /**
     * Test the property 'startTransitionCondition'
     */
    @Test
    public void startTransitionConditionTest() {
        // TODO: test startTransitionCondition
    }

    /**
     * Test the property 'maxCompleteExecutions'
     */
    @Test
    public void maxCompleteExecutionsTest() {
        // TODO: test maxCompleteExecutions
    }

    /**
     * Test the property 'shouldEvalTransitionsAfterFirstExecution'
     */
    @Test
    public void shouldEvalTransitionsAfterFirstExecutionTest() {
        // TODO: test shouldEvalTransitionsAfterFirstExecution
    }

    /**
     * Test the property 'conditionCountThreshold'
     */
    @Test
    public void conditionCountThresholdTest() {
        // TODO: test conditionCountThreshold
    }

    /**
     * Test the property 'conditionRatioThreshold'
     */
    @Test
    public void conditionRatioThresholdTest() {
        // TODO: test conditionRatioThreshold
    }

    /**
     * Test the property 'maxAgeSeconds'
     */
    @Test
    public void maxAgeSecondsTest() {
        // TODO: test maxAgeSeconds
    }

    /**
     * Test the property 'defaultMaxRetries'
     */
    @Test
    public void defaultMaxRetriesTest() {
        // TODO: test defaultMaxRetries
    }

    /**
     * Test the property 'failureBehavior'
     */
    @Test
    public void failureBehaviorTest() {
        // TODO: test failureBehavior
    }

    /**
     * Test the property 'allowWorkflowExecutionAfterFailure'
     */
    @Test
    public void allowWorkflowExecutionAfterFailureTest() {
        // TODO: test allowWorkflowExecutionAfterFailure
    }

    /**
     * Test the property 'timeoutBehavior'
     */
    @Test
    public void timeoutBehaviorTest() {
        // TODO: test timeoutBehavior
    }

    /**
     * Test the property 'allowWorkflowExecutionAfterTimeout'
     */
    @Test
    public void allowWorkflowExecutionAfterTimeoutTest() {
        // TODO: test allowWorkflowExecutionAfterTimeout
    }

    /**
     * Test the property 'environmentVariablesOverrides'
     */
    @Test
    public void environmentVariablesOverridesTest() {
        // TODO: test environmentVariablesOverrides
    }

    /**
     * Test the property 'allocatedCpuUnits'
     */
    @Test
    public void allocatedCpuUnitsTest() {
        // TODO: test allocatedCpuUnits
    }

    /**
     * Test the property 'allocatedMemoryMb'
     */
    @Test
    public void allocatedMemoryMbTest() {
        // TODO: test allocatedMemoryMb
    }

    /**
     * Test the property 'useTaskAlertMethods'
     */
    @Test
    public void useTaskAlertMethodsTest() {
        // TODO: test useTaskAlertMethods
    }

    /**
     * Test the property 'uiColor'
     */
    @Test
    public void uiColorTest() {
        // TODO: test uiColor
    }

    /**
     * Test the property 'uiIconType'
     */
    @Test
    public void uiIconTypeTest() {
        // TODO: test uiIconType
    }

    /**
     * Test the property 'uiScale'
     */
    @Test
    public void uiScaleTest() {
        // TODO: test uiScale
    }

    /**
     * Test the property 'uiCenterMarginTop'
     */
    @Test
    public void uiCenterMarginTopTest() {
        // TODO: test uiCenterMarginTop
    }

    /**
     * Test the property 'uiCenterMarginLeft'
     */
    @Test
    public void uiCenterMarginLeftTest() {
        // TODO: test uiCenterMarginLeft
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

}
