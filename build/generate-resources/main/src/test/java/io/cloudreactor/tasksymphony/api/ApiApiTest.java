/*
 * CloudReactor API
 * CloudReactor API Documentation
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jeff@cloudreactor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cloudreactor.tasksymphony.api;

import io.cloudreactor.tasksymphony.invoker.ApiException;
import io.cloudreactor.tasksymphony.model.AlertMethod;
import io.cloudreactor.tasksymphony.model.EmailNotificationProfile;
import io.cloudreactor.tasksymphony.model.PagerDutyProfile;
import io.cloudreactor.tasksymphony.model.PaginatedAlertMethodList;
import io.cloudreactor.tasksymphony.model.PaginatedEmailNotificationProfileList;
import io.cloudreactor.tasksymphony.model.PaginatedPagerDutyProfileList;
import io.cloudreactor.tasksymphony.model.PaginatedRunEnvironmentList;
import io.cloudreactor.tasksymphony.model.PaginatedTaskExecutionList;
import io.cloudreactor.tasksymphony.model.PaginatedTaskList;
import io.cloudreactor.tasksymphony.model.PaginatedWorkflowExecutionSummaryList;
import io.cloudreactor.tasksymphony.model.PaginatedWorkflowSummaryList;
import io.cloudreactor.tasksymphony.model.PaginatedWorkflowTaskInstanceList;
import io.cloudreactor.tasksymphony.model.PaginatedWorkflowTransitionList;
import io.cloudreactor.tasksymphony.model.PatchedAlertMethod;
import io.cloudreactor.tasksymphony.model.PatchedEmailNotificationProfile;
import io.cloudreactor.tasksymphony.model.PatchedPagerDutyProfile;
import io.cloudreactor.tasksymphony.model.PatchedRunEnvironment;
import io.cloudreactor.tasksymphony.model.PatchedTask;
import io.cloudreactor.tasksymphony.model.PatchedTaskExecution;
import io.cloudreactor.tasksymphony.model.PatchedWorkflow;
import io.cloudreactor.tasksymphony.model.PatchedWorkflowExecution;
import io.cloudreactor.tasksymphony.model.PatchedWorkflowTaskInstance;
import io.cloudreactor.tasksymphony.model.PatchedWorkflowTransition;
import io.cloudreactor.tasksymphony.model.RunEnvironment;
import io.cloudreactor.tasksymphony.model.Task;
import io.cloudreactor.tasksymphony.model.TaskExecution;
import java.util.UUID;
import io.cloudreactor.tasksymphony.model.Workflow;
import io.cloudreactor.tasksymphony.model.WorkflowExecution;
import io.cloudreactor.tasksymphony.model.WorkflowTaskInstance;
import io.cloudreactor.tasksymphony.model.WorkflowTransition;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiApi
 */
@Ignore
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsCloneCreateTest() throws ApiException {
        UUID uuid = null;
        AlertMethod alertMethod = null;
        AlertMethod response = api.apiV1AlertMethodsCloneCreate(uuid, alertMethod);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsCreateTest() throws ApiException {
        AlertMethod alertMethod = null;
        AlertMethod response = api.apiV1AlertMethodsCreate(alertMethod);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1AlertMethodsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsListTest() throws ApiException {
        Integer createdByGroupId = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        String runEnvironmentUuid = null;
        String search = null;
        PaginatedAlertMethodList response = api.apiV1AlertMethodsList(createdByGroupId, limit, name, offset, ordering, runEnvironmentUuid, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedAlertMethod patchedAlertMethod = null;
        AlertMethod response = api.apiV1AlertMethodsPartialUpdate(uuid, patchedAlertMethod);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsRetrieveTest() throws ApiException {
        UUID uuid = null;
        AlertMethod response = api.apiV1AlertMethodsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1AlertMethodsUpdateTest() throws ApiException {
        UUID uuid = null;
        AlertMethod alertMethod = null;
        AlertMethod response = api.apiV1AlertMethodsUpdate(uuid, alertMethod);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesCloneCreateTest() throws ApiException {
        UUID uuid = null;
        EmailNotificationProfile emailNotificationProfile = null;
        EmailNotificationProfile response = api.apiV1EmailNotificationProfilesCloneCreate(uuid, emailNotificationProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesCreateTest() throws ApiException {
        EmailNotificationProfile emailNotificationProfile = null;
        EmailNotificationProfile response = api.apiV1EmailNotificationProfilesCreate(emailNotificationProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1EmailNotificationProfilesDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesListTest() throws ApiException {
        Integer createdByGroupId = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        String runEnvironmentUuid = null;
        String search = null;
        PaginatedEmailNotificationProfileList response = api.apiV1EmailNotificationProfilesList(createdByGroupId, limit, name, offset, ordering, runEnvironmentUuid, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedEmailNotificationProfile patchedEmailNotificationProfile = null;
        EmailNotificationProfile response = api.apiV1EmailNotificationProfilesPartialUpdate(uuid, patchedEmailNotificationProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesRetrieveTest() throws ApiException {
        UUID uuid = null;
        EmailNotificationProfile response = api.apiV1EmailNotificationProfilesRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1EmailNotificationProfilesUpdateTest() throws ApiException {
        UUID uuid = null;
        EmailNotificationProfile emailNotificationProfile = null;
        EmailNotificationProfile response = api.apiV1EmailNotificationProfilesUpdate(uuid, emailNotificationProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesCloneCreateTest() throws ApiException {
        UUID uuid = null;
        PagerDutyProfile pagerDutyProfile = null;
        PagerDutyProfile response = api.apiV1PagerdutyProfilesCloneCreate(uuid, pagerDutyProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesCreateTest() throws ApiException {
        PagerDutyProfile pagerDutyProfile = null;
        PagerDutyProfile response = api.apiV1PagerdutyProfilesCreate(pagerDutyProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1PagerdutyProfilesDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesListTest() throws ApiException {
        Integer createdByGroupId = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        String runEnvironmentUuid = null;
        String search = null;
        PaginatedPagerDutyProfileList response = api.apiV1PagerdutyProfilesList(createdByGroupId, limit, name, offset, ordering, runEnvironmentUuid, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedPagerDutyProfile patchedPagerDutyProfile = null;
        PagerDutyProfile response = api.apiV1PagerdutyProfilesPartialUpdate(uuid, patchedPagerDutyProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesRetrieveTest() throws ApiException {
        UUID uuid = null;
        PagerDutyProfile response = api.apiV1PagerdutyProfilesRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1PagerdutyProfilesUpdateTest() throws ApiException {
        UUID uuid = null;
        PagerDutyProfile pagerDutyProfile = null;
        PagerDutyProfile response = api.apiV1PagerdutyProfilesUpdate(uuid, pagerDutyProfile);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsCloneCreateTest() throws ApiException {
        UUID uuid = null;
        RunEnvironment runEnvironment = null;
        RunEnvironment response = api.apiV1RunEnvironmentsCloneCreate(uuid, runEnvironment);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsCreateTest() throws ApiException {
        RunEnvironment runEnvironment = null;
        RunEnvironment response = api.apiV1RunEnvironmentsCreate(runEnvironment);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1RunEnvironmentsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsListTest() throws ApiException {
        Integer createdByGroupId = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        String search = null;
        PaginatedRunEnvironmentList response = api.apiV1RunEnvironmentsList(createdByGroupId, limit, name, offset, ordering, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedRunEnvironment patchedRunEnvironment = null;
        RunEnvironment response = api.apiV1RunEnvironmentsPartialUpdate(uuid, patchedRunEnvironment);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsRetrieveTest() throws ApiException {
        UUID uuid = null;
        RunEnvironment response = api.apiV1RunEnvironmentsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1RunEnvironmentsUpdateTest() throws ApiException {
        UUID uuid = null;
        RunEnvironment runEnvironment = null;
        RunEnvironment response = api.apiV1RunEnvironmentsUpdate(uuid, runEnvironment);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TaskExecutionsCreateTest() throws ApiException {
        TaskExecution taskExecution = null;
        TaskExecution response = api.apiV1TaskExecutionsCreate(taskExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TaskExecutionsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1TaskExecutionsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TaskExecutionsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String ordering = null;
        String search = null;
        Integer taskCreatedByGroupId = null;
        String taskUuid = null;
        PaginatedTaskExecutionList response = api.apiV1TaskExecutionsList(limit, offset, ordering, search, taskCreatedByGroupId, taskUuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TaskExecutionsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedTaskExecution patchedTaskExecution = null;
        TaskExecution response = api.apiV1TaskExecutionsPartialUpdate(uuid, patchedTaskExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TaskExecutionsRetrieveTest() throws ApiException {
        UUID uuid = null;
        TaskExecution response = api.apiV1TaskExecutionsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TaskExecutionsUpdateTest() throws ApiException {
        UUID uuid = null;
        TaskExecution taskExecution = null;
        TaskExecution response = api.apiV1TaskExecutionsUpdate(uuid, taskExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TasksCreateTest() throws ApiException {
        Task task = null;
        Task response = api.apiV1TasksCreate(task);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TasksDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1TasksDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TasksListTest() throws ApiException {
        String description = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        UUID runEnvironmentUuid = null;
        String search = null;
        PaginatedTaskList response = api.apiV1TasksList(description, limit, name, offset, ordering, runEnvironmentUuid, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TasksPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedTask patchedTask = null;
        Task response = api.apiV1TasksPartialUpdate(uuid, patchedTask);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TasksRetrieveTest() throws ApiException {
        UUID uuid = null;
        Task response = api.apiV1TasksRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1TasksUpdateTest() throws ApiException {
        UUID uuid = null;
        Task task = null;
        Task response = api.apiV1TasksUpdate(uuid, task);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsCreateTest() throws ApiException {
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.apiV1WorkflowExecutionsCreate(workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1WorkflowExecutionsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String ordering = null;
        String search = null;
        String workflowCreatedByGroupId = null;
        String workflowUuid = null;
        PaginatedWorkflowExecutionSummaryList response = api.apiV1WorkflowExecutionsList(limit, offset, ordering, search, workflowCreatedByGroupId, workflowUuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedWorkflowExecution patchedWorkflowExecution = null;
        WorkflowExecution response = api.apiV1WorkflowExecutionsPartialUpdate(uuid, patchedWorkflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsRetrieveTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution response = api.apiV1WorkflowExecutionsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsRetryCreateTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.apiV1WorkflowExecutionsRetryCreate(uuid, workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsUpdateTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.apiV1WorkflowExecutionsUpdate(uuid, workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowExecutionsWorkflowTaskInstanceExecutionsCreateTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.apiV1WorkflowExecutionsWorkflowTaskInstanceExecutionsCreate(uuid, workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTaskInstancesCreateTest() throws ApiException {
        WorkflowTaskInstance workflowTaskInstance = null;
        WorkflowTaskInstance response = api.apiV1WorkflowTaskInstancesCreate(workflowTaskInstance);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTaskInstancesDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1WorkflowTaskInstancesDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTaskInstancesListTest() throws ApiException {
        String description = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        String search = null;
        String taskName = null;
        UUID taskUuid = null;
        Integer workflowCreatedByGroupId = null;
        UUID workflowRunEnvironmentUuid = null;
        UUID workflowUuid = null;
        PaginatedWorkflowTaskInstanceList response = api.apiV1WorkflowTaskInstancesList(description, limit, name, offset, ordering, search, taskName, taskUuid, workflowCreatedByGroupId, workflowRunEnvironmentUuid, workflowUuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTaskInstancesPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedWorkflowTaskInstance patchedWorkflowTaskInstance = null;
        WorkflowTaskInstance response = api.apiV1WorkflowTaskInstancesPartialUpdate(uuid, patchedWorkflowTaskInstance);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTaskInstancesRetrieveTest() throws ApiException {
        UUID uuid = null;
        WorkflowTaskInstance response = api.apiV1WorkflowTaskInstancesRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTaskInstancesUpdateTest() throws ApiException {
        UUID uuid = null;
        WorkflowTaskInstance workflowTaskInstance = null;
        WorkflowTaskInstance response = api.apiV1WorkflowTaskInstancesUpdate(uuid, workflowTaskInstance);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTransitionsCreateTest() throws ApiException {
        WorkflowTransition workflowTransition = null;
        WorkflowTransition response = api.apiV1WorkflowTransitionsCreate(workflowTransition);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTransitionsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1WorkflowTransitionsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTransitionsListTest() throws ApiException {
        String description = null;
        Integer limit = null;
        Integer offset = null;
        String ordering = null;
        String search = null;
        PaginatedWorkflowTransitionList response = api.apiV1WorkflowTransitionsList(description, limit, offset, ordering, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTransitionsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedWorkflowTransition patchedWorkflowTransition = null;
        WorkflowTransition response = api.apiV1WorkflowTransitionsPartialUpdate(uuid, patchedWorkflowTransition);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTransitionsRetrieveTest() throws ApiException {
        UUID uuid = null;
        WorkflowTransition response = api.apiV1WorkflowTransitionsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowTransitionsUpdateTest() throws ApiException {
        UUID uuid = null;
        WorkflowTransition workflowTransition = null;
        WorkflowTransition response = api.apiV1WorkflowTransitionsUpdate(uuid, workflowTransition);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsCloneCreateTest() throws ApiException {
        UUID uuid = null;
        Workflow workflow = null;
        Workflow response = api.apiV1WorkflowsCloneCreate(uuid, workflow);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsCreateTest() throws ApiException {
        Workflow workflow = null;
        Workflow response = api.apiV1WorkflowsCreate(workflow);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.apiV1WorkflowsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsListTest() throws ApiException {
        String description = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String ordering = null;
        String runEnvironmentUuid = null;
        String search = null;
        PaginatedWorkflowSummaryList response = api.apiV1WorkflowsList(description, limit, name, offset, ordering, runEnvironmentUuid, search);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedWorkflow patchedWorkflow = null;
        Workflow response = api.apiV1WorkflowsPartialUpdate(uuid, patchedWorkflow);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsRetrieveTest() throws ApiException {
        UUID uuid = null;
        Workflow response = api.apiV1WorkflowsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV1WorkflowsUpdateTest() throws ApiException {
        UUID uuid = null;
        Workflow workflow = null;
        Workflow response = api.apiV1WorkflowsUpdate(uuid, workflow);

        // TODO: test validations
    }
}
