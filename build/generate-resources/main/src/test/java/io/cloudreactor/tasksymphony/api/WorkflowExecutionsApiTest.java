/*
 * CloudReactor API
 * CloudReactor API Documentation
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jeff@cloudreactor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.cloudreactor.tasksymphony.api;

import io.cloudreactor.tasksymphony.invoker.ApiException;
import io.cloudreactor.tasksymphony.model.PaginatedWorkflowExecutionSummaryList;
import io.cloudreactor.tasksymphony.model.PatchedWorkflowExecution;
import java.util.UUID;
import io.cloudreactor.tasksymphony.model.WorkflowExecution;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowExecutionsApi
 */
@Ignore
public class WorkflowExecutionsApiTest {

    private final WorkflowExecutionsApi api = new WorkflowExecutionsApi();

    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsCreateTest() throws ApiException {
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.workflowExecutionsCreate(workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.workflowExecutionsDestroy(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String ordering = null;
        String search = null;
        String workflowCreatedByGroupId = null;
        String workflowUuid = null;
        PaginatedWorkflowExecutionSummaryList response = api.workflowExecutionsList(limit, offset, ordering, search, workflowCreatedByGroupId, workflowUuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedWorkflowExecution patchedWorkflowExecution = null;
        WorkflowExecution response = api.workflowExecutionsPartialUpdate(uuid, patchedWorkflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsRetrieveTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution response = api.workflowExecutionsRetrieve(uuid);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsRetryCreateTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.workflowExecutionsRetryCreate(uuid, workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsUpdateTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.workflowExecutionsUpdate(uuid, workflowExecution);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowExecutionsWorkflowTaskInstanceExecutionsCreateTest() throws ApiException {
        UUID uuid = null;
        WorkflowExecution workflowExecution = null;
        WorkflowExecution response = api.workflowExecutionsWorkflowTaskInstanceExecutionsCreate(uuid, workflowExecution);

        // TODO: test validations
    }
}
